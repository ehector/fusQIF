// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// delta_constructor
arma::mat delta_constructor(const int& p, const int& J, const int& K);
RcppExport SEXP _fusQIF_delta_constructor(SEXP pSEXP, SEXP JSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_constructor(p, J, K));
    return rcpp_result_gen;
END_RCPP
}
// X_constructor
arma::cube X_constructor(const arma::mat& covariates, const int& M, const int& N, const int& p);
RcppExport SEXP _fusQIF_X_constructor(SEXP covariatesSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(X_constructor(covariates, M, N, p));
    return rcpp_result_gen;
END_RCPP
}
// increQIF_sub
List increQIF_sub(arma::mat X, arma::vec y, arma::vec nobs, String family, String corstr, arma::vec beta_old, int maxit, double tol);
RcppExport SEXP _fusQIF_increQIF_sub(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP beta_oldSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< String >::type family(familySEXP);
    Rcpp::traits::input_parameter< String >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(increQIF_sub(X, y, nobs, family, corstr, beta_old, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// diqif_min
List diqif_min(const arma::cube& X, const arma::mat& y, const List& nobs, const String& family, const String& corstr, const arma::vec& beta_old, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t, const int& maxit, const double& tol);
RcppExport SEXP _fusQIF_diqif_min(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP beta_oldSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const String& >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(diqif_min(X, y, nobs, family, corstr, beta_old, J, K, M, N, p, n_k, m_j, rho, gamma, t, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// diqif_eval
List diqif_eval(const arma::cube& X, const arma::mat& y, const List& nobs, const String& family, const String& corstr, const arma::vec& beta, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t);
RcppExport SEXP _fusQIF_diqif_eval(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP betaSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const String& >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(diqif_eval(X, y, nobs, family, corstr, beta, J, K, M, N, p, n_k, m_j, rho, gamma, t));
    return rcpp_result_gen;
END_RCPP
}
// doADMM_MCP
List doADMM_MCP(const arma::cube& X, const arma::mat& y, const List& nobs, const String& family, const String& corstr, const arma::vec& init_betas, const arma::vec& init_gamma, const arma::vec& init_t, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& lambda, const double& rho, const double& delta, const double& tol_1, const double& tol_2, const int& maxit_1, const int& maxit_2);
RcppExport SEXP _fusQIF_doADMM_MCP(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP init_betasSEXP, SEXP init_gammaSEXP, SEXP init_tSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP deltaSEXP, SEXP tol_1SEXP, SEXP tol_2SEXP, SEXP maxit_1SEXP, SEXP maxit_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const String& >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_betas(init_betasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_gamma(init_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_t(init_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_1(tol_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_2(tol_2SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_1(maxit_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_2(maxit_2SEXP);
    rcpp_result_gen = Rcpp::wrap(doADMM_MCP(X, y, nobs, family, corstr, init_betas, init_gamma, init_t, J, K, M, N, p, n_k, m_j, lambda, rho, delta, tol_1, tol_2, maxit_1, maxit_2));
    return rcpp_result_gen;
END_RCPP
}
// try_doADMM_MCP
List try_doADMM_MCP(const arma::cube& X, const arma::mat& y, const List& nobs, const String& family, const String& corstr, const arma::vec& init_betas, const arma::vec& init_gamma, const arma::vec& init_t, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& lambda, const double& rho, const double& delta, const double& tol_1, const double& tol_2, const int& maxit_1, const int& maxit_2);
RcppExport SEXP _fusQIF_try_doADMM_MCP(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP init_betasSEXP, SEXP init_gammaSEXP, SEXP init_tSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP deltaSEXP, SEXP tol_1SEXP, SEXP tol_2SEXP, SEXP maxit_1SEXP, SEXP maxit_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const String& >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_betas(init_betasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_gamma(init_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_t(init_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_1(tol_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_2(tol_2SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_1(maxit_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_2(maxit_2SEXP);
    rcpp_result_gen = Rcpp::wrap(try_doADMM_MCP(X, y, nobs, family, corstr, init_betas, init_gamma, init_t, J, K, M, N, p, n_k, m_j, lambda, rho, delta, tol_1, tol_2, maxit_1, maxit_2));
    return rcpp_result_gen;
END_RCPP
}
// linear_min
List linear_min(const arma::cube& X, const arma::mat& y, const List& nobs, const arma::vec& beta_old, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t);
RcppExport SEXP _fusQIF_linear_min(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP beta_oldSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_min(X, y, nobs, beta_old, J, K, M, N, p, n_k, m_j, rho, gamma, t));
    return rcpp_result_gen;
END_RCPP
}
// binomial_min
List binomial_min(const arma::cube& X, const arma::mat& y, const List& nobs, const arma::vec& beta_old, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t, const int& maxit, const double& tol);
RcppExport SEXP _fusQIF_binomial_min(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP beta_oldSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_min(X, y, nobs, beta_old, J, K, M, N, p, n_k, m_j, rho, gamma, t, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// poisson_min
List poisson_min(const arma::cube& X, const arma::mat& y, const List& nobs, const arma::vec& beta_old, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t, const int& maxit, const double& tol);
RcppExport SEXP _fusQIF_poisson_min(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP beta_oldSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_min(X, y, nobs, beta_old, J, K, M, N, p, n_k, m_j, rho, gamma, t, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// linear_eval
List linear_eval(const arma::cube& X, const arma::mat& y, const List& nobs, const arma::vec& beta, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t);
RcppExport SEXP _fusQIF_linear_eval(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP betaSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_eval(X, y, nobs, beta, J, K, M, N, p, n_k, m_j, rho, gamma, t));
    return rcpp_result_gen;
END_RCPP
}
// binomial_eval
List binomial_eval(const arma::cube& X, const arma::mat& y, const List& nobs, const arma::vec& beta, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t);
RcppExport SEXP _fusQIF_binomial_eval(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP betaSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(binomial_eval(X, y, nobs, beta, J, K, M, N, p, n_k, m_j, rho, gamma, t));
    return rcpp_result_gen;
END_RCPP
}
// poisson_eval
List poisson_eval(const arma::cube& X, const arma::mat& y, const List& nobs, const arma::vec& beta, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& rho, const arma::vec& gamma, const arma::vec& t);
RcppExport SEXP _fusQIF_poisson_eval(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP betaSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP rhoSEXP, SEXP gammaSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_eval(X, y, nobs, beta, J, K, M, N, p, n_k, m_j, rho, gamma, t));
    return rcpp_result_gen;
END_RCPP
}
// indep_doADMM_MCP
List indep_doADMM_MCP(const arma::cube& X, const arma::mat& y, const List& nobs, const String& family, const arma::vec& init_betas, const arma::vec& init_gamma, const arma::vec& init_t, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& lambda, const double& rho, const double& delta, const double& tol_1, const double& tol_2, const int& maxit_1, const int& maxit_2);
RcppExport SEXP _fusQIF_indep_doADMM_MCP(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP init_betasSEXP, SEXP init_gammaSEXP, SEXP init_tSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP deltaSEXP, SEXP tol_1SEXP, SEXP tol_2SEXP, SEXP maxit_1SEXP, SEXP maxit_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_betas(init_betasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_gamma(init_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_t(init_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_1(tol_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_2(tol_2SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_1(maxit_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_2(maxit_2SEXP);
    rcpp_result_gen = Rcpp::wrap(indep_doADMM_MCP(X, y, nobs, family, init_betas, init_gamma, init_t, J, K, M, N, p, n_k, m_j, lambda, rho, delta, tol_1, tol_2, maxit_1, maxit_2));
    return rcpp_result_gen;
END_RCPP
}
// try_indep_doADMM_MCP
List try_indep_doADMM_MCP(const arma::cube& X, const arma::mat& y, const List& nobs, const String& family, const arma::vec& init_betas, const arma::vec& init_gamma, const arma::vec& init_t, const int& J, const int& K, const int& M, const int& N, const int& p, const arma::vec& n_k, const arma::vec& m_j, const double& lambda, const double& rho, const double& delta, const double& tol_1, const double& tol_2, const int& maxit_1, const int& maxit_2);
RcppExport SEXP _fusQIF_try_indep_doADMM_MCP(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP init_betasSEXP, SEXP init_gammaSEXP, SEXP init_tSEXP, SEXP JSEXP, SEXP KSEXP, SEXP MSEXP, SEXP NSEXP, SEXP pSEXP, SEXP n_kSEXP, SEXP m_jSEXP, SEXP lambdaSEXP, SEXP rhoSEXP, SEXP deltaSEXP, SEXP tol_1SEXP, SEXP tol_2SEXP, SEXP maxit_1SEXP, SEXP maxit_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< const String& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_betas(init_betasSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_gamma(init_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type init_t(init_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type J(JSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type n_k(n_kSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type m_j(m_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_1(tol_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type tol_2(tol_2SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_1(maxit_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type maxit_2(maxit_2SEXP);
    rcpp_result_gen = Rcpp::wrap(try_indep_doADMM_MCP(X, y, nobs, family, init_betas, init_gamma, init_t, J, K, M, N, p, n_k, m_j, lambda, rho, delta, tol_1, tol_2, maxit_1, maxit_2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fusQIF_delta_constructor", (DL_FUNC) &_fusQIF_delta_constructor, 3},
    {"_fusQIF_X_constructor", (DL_FUNC) &_fusQIF_X_constructor, 4},
    {"_fusQIF_increQIF_sub", (DL_FUNC) &_fusQIF_increQIF_sub, 8},
    {"_fusQIF_diqif_min", (DL_FUNC) &_fusQIF_diqif_min, 18},
    {"_fusQIF_diqif_eval", (DL_FUNC) &_fusQIF_diqif_eval, 16},
    {"_fusQIF_doADMM_MCP", (DL_FUNC) &_fusQIF_doADMM_MCP, 22},
    {"_fusQIF_try_doADMM_MCP", (DL_FUNC) &_fusQIF_try_doADMM_MCP, 22},
    {"_fusQIF_linear_min", (DL_FUNC) &_fusQIF_linear_min, 14},
    {"_fusQIF_binomial_min", (DL_FUNC) &_fusQIF_binomial_min, 16},
    {"_fusQIF_poisson_min", (DL_FUNC) &_fusQIF_poisson_min, 16},
    {"_fusQIF_linear_eval", (DL_FUNC) &_fusQIF_linear_eval, 14},
    {"_fusQIF_binomial_eval", (DL_FUNC) &_fusQIF_binomial_eval, 14},
    {"_fusQIF_poisson_eval", (DL_FUNC) &_fusQIF_poisson_eval, 14},
    {"_fusQIF_indep_doADMM_MCP", (DL_FUNC) &_fusQIF_indep_doADMM_MCP, 21},
    {"_fusQIF_try_indep_doADMM_MCP", (DL_FUNC) &_fusQIF_try_indep_doADMM_MCP, 21},
    {NULL, NULL, 0}
};

RcppExport void R_init_fusQIF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
